USER GUIDE

Table Of Contents:
	I. Overview
	II. Page 1: Setting Attracting Points
	III. Page 2: Setting Paths
	IV. Page 3: Global Properties
	V. Page 4: Generating the Fractal
	VI. Examples

I. Overview

Welcome to FrickFrackFractal! This Java app generates fractals through a method called Chaos Games, 
which is a more specific case of an overarching form of generation called Iterated Function Systems (IFS). 
This method of fractal generation relies on points being shifted around by a set of contraction maps 
(functions that shrink distances between points over multiple iterations). Points are placed on a map and 
move towards attracting points (which I call attractors) based on a mix of randomness and parameters set by 
the user. Placing thousands of points eventually creates (or rather, approximates) a fractal. A perfect 
fractal would be created by the placement of infinite points which are allowed shift around infinitely, but 
we are able to substitute this with random point placement and a truncated amount of movement. Out of chaos 
comes order. Note that not all sets of parameters are guaranteed to create fractals, some will create clouds, 
white noise, or a degenerate set of points.
_______

II. Page 1: Setting Attracting Points

Page 1 is where the user places attractors for fractal generation. The user places attractors in one of 2 ways: 
by clicking directly on the board with a mouse or inputting exact XY coordinates in the options and clicking 
“Set Attracting Point”. Please normalize coordinates to [0,1], as the calculator only accepts XY such values and 
will reject non numerical or out of bounds coordinates. At least one point must be placed, and point placement can
be undone with the undo button.

Page 1 also contains a color picker (under “Choose Attractor Color”). If the user desires to create a multicolored 
fractal, they set each attractor to different colors. The computer does the work of creating a smooth gradient colored 
fractal based on user choices. The default is black and creates a black and white color fractal.

Note: It is HIGHLY recommended that the user places at least 3 attractors on the graph. Placing 1 or 2 attractors 
will create degenerate fractals on account of the fact that the most “depth” that can be created by connecting 1 
or 2 points is a simple line (as opposed to a polygon with 3+ points).
_______

III. Page 2: Setting Paths

The fractals generated are what I call “first order fractals”, because each movement of each point placed for the 
random walk is based directly on the previous attractor it moved towards (as opposed to being based on the previous 
2,3,... attractors it moved towards). Currently, there is no support for higher order fractals.

The current node for which connections are being set is highlighted in yellow. The user clicks on the other nodes to 
connect the highlighted node to them (reclicking deletes the connection). There are some buttons to delete and auto-add 
connections for ease. To prevent the issue of points being locked out of movement, at least one connection must be set 
per attractor.

There is also a box for changing relative probability (titled “Set Relative Probability”) with a default of 1. This is 
a rather advanced setting and deals with how frequently a point travels towards an attractor when traveling to that 
attractor is a possibility. The end result is a fractal with inconsistent density of points in space. Setting probability 
to 0 effectively removes the point, and the box does not accept nonnumerical values or values outside of [0,1].
_______

IV. Page 3: Global Properties

This page deals with global properties of the fractal and contractive functions being implemented. The contraction rate 
deals with how quickly points move towards attractor, and it is standard to put the rate between 0 and 1. Negative numbers 
are allowed, but cause repulsion, and numbers greater than 1 will cause points to overshoot past the attractor. Setting 
contraction rate to 0 will result in white noise and fail to create a fractal.

The user also selects a type of contraction on a drop down menu to continue. There are currently four types: Constant, 
Exponential, Harmonic, and Fibonacci. Each contracts at a different rate as described in the menu. Constant is the standard 
type of contraction, and very little is known about the other types of contractions. There are many more rates of contraction 
that are not supported at the moment.

The last property is “Level of Recursions” which controls the detail of the fractal by telling each point placed how many 
random walks to take before moving on to the next point. The standard level is ~12, and it is not recommended the the user 
goes above 17 or below 7 to balance out detail with computation time. Only integers with a value greater than 0 are accepted.
_______

V. Page 4: Generating the Fractal

Whew! That was some work, but we’re finally ready to generate the fractal. Input the amount of points you would like to add 
to the graph (recommended ~10,000) and press “Add Points”. Watch the fractal start to form before your eyes by repeatedly pressing 
“Add Points”. You can change the number of points you wish to add (no non integer values, values less than 0, or non-numerical 
values will be accepted). You can toggle the visibility of the grid, attracting points, and attractor hull (used for point placement) 
as desired.
_______

VI. Examples

PENTAGONAL N-FLAKE

Coordinates: 
Attractor 1: (.5, .95)
Attractor 2: (.0244717, .6045085)
Attractor 3: (.9755283, .6045085)
Attractor 4: (.2061074, .0454915)
Attractor 5: (.7938926, .0454915)

Connections:
	Each attractor connects to every other attractor (including self)

Contraction Rate/Type:
	Linear

Rate: 1/phi ~ .6180350	(phi is the Golden ratio)

Recursions:
	12 - 14

SIERPINSKI TRIANGLE

Coordinates: 
Attractor 1: (.1, .1)
Attractor 2: (.9, .1)
Attractor 3: (.5, .79282)

Connections:
	Each attractor connects to every other attractor (including self)

Contraction Rate/Type:
	Linear

Rate: .5

Recursions:
	12 - 14

OVERLAPPING SIERPINSKI TRIANGLES (Very similar to above, just use exponential contraction)

Coordinates: 
Attractor 1: (.1, .1)
Attractor 2: (.9, .1)
Attractor 3: (.5, .79282)

Connections:
	Each attractor connects to every other attractor (including self)

Contraction Rate/Type:
	Exponential

Rate: .5

Recursions:
	12 - 14

4 LEAF CLOVER

Coordinates:
Attractor 1: (.1, .1)
Attractor 2: (.9, .1)
Attractor 3: (.1, .9)
Attractor 4: (.9, .9)
Attractor 5: (.5, .5)

Connections:
	Attractors 1 connects to: 2,4,5
	Attractor 2 connects to: 3,4,5
	Attractor 3 connects to: 1,2,5
	Attractor 4 connects to: 1,3,5
	Attractor 5 connects to: 1,2,3,4

Contraction Rate/Type:
	Linear

Rate: .5

Recursions:
	12 - 14

CANTOR SET

Coordinates:
	Attractor 1: (.1, .1)
	Attractor 2: (.9, .9)

Connections:
	Each attractor connects to every other attractor (including self)

Contraction Rate/Type:
	Linear

Rate: 2/3 ~ .6666667

Recursions:
	12 - 14
